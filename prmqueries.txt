    #include <cstdio>
    #include <iostream>
    #include<algorithm>
    using namespace std;
    //#define MAXPRIME 1000000007
    bool prime[10000009];
    char type;
    int n, q, x, y, v, array[100005],lazy[1000000],tree[1000000];
    void sieve()
    {
    	for(int i=0;i<10000009;i++) prime[i] = true;
    	prime[0] = false;
    	prime[1] = false;
    	for(int i=2;i<3165;i++)
    		if(prime[i])
    			for(int j = i * i;j <= 10000009; j += i) prime[j] = false;
    }
    void build(int node, int b, int e)
    {
    	lazy[node] = 0;
    	int mid = (b + e) / 2, left = 2 * node, right = left + 1;
    	if(b == e) tree[node] = array[e] <= 10000000 && prime[array[e]];
    	else
    	{
    		build(left, b, mid);
    		build(right, mid + 1, e);
    		tree[node] = tree[left] + tree[right];
    	}
    }
    int query(int node, int b, int e, int i, int j)
    {
    	int mid = (b + e) / 2, left = 2 * node, right = left + 1;
    	if(lazy[node])
    	{
    		tree[node] = (lazy[node] <= 10000000 && prime[lazy[node]]) * (e - b + 1);
    		if(b != e)
    			lazy[left] = lazy[right] = lazy[node];
    		else array[e] = lazy[node];
    		lazy[node] = 0;
    	}
    	if(b > j || e < i) return 0;
    	if(b >= i && e <= j) return tree[node];
    	int l = query(left, b, mid, i, j);
    	int r = query(right, mid + 1, e, i, j);
     
    	return l + r;
    }
    void update_add(int node, int b, int e, int i, int v)
    {
    	int mid = (b + e) / 2, left = 2 * node, right = left + 1;
    	if(lazy[node])
    	{
    		tree[node] = (lazy[node] <= 10000000 && prime[lazy[node]]) * (e - b + 1);
    		if(b != e)
    			lazy[left] = lazy[right] = lazy[node];
    		else array[e] = lazy[node];
    		lazy[node] = 0;
    	}
     
    	if(b > i || e < i) return;
    	if(b == e)
    	{
    		array[e] += v;
    		tree[node] = array[e] <= 10000000 && prime[array[e]];
    	}
    	else
    	{
    		update_add(left, b, mid, i, v);
    		update_add(right, mid + 1, e, i, v);
    		tree[node] = tree[left] + tree[right];
    	}
    }
    void update_replace(int node, int b, int e, int i, int j, int v)
    {
    	int mid = (b + e) / 2, left = 2 * node, right = left + 1;
    	if(lazy[node])
    	{
    		tree[node] = (prime[lazy[node]]) * (e - b + 1);
    		if(b != e)
    			lazy[left] = lazy[right] = lazy[node];
    		else array[e] = lazy[node];
    		lazy[node] = 0;
    	}
     
    	if(b > j || e < i) return;
    	if(b >= i && e <= j)
    	{
    		tree[node] = (prime[v]) * (e - b + 1);
    		if(b != e)
    			lazy[left] = lazy[right] = v;
    		else array[e] = v;
    		return;
    	}
    	update_replace(left, b, mid, i, j, v);
    	update_replace(right, mid + 1, e, i, j, v);
    	tree[node] = tree[left] + tree[right];
    }
    int main()
    {
    	sieve();
    	scanf("%d %d\n", &n, &q);
    	for(int i=0; i<n;i++)
    	{
    		if(i != 0) scanf(" "); 
    		scanf("%d", array + i);
    	}
    	build(1, 0, n - 1);
    	while(q--)
    	{
    		scanf("\n");
    		scanf("%c", &type);
    		if(type == 'A') scanf("%d %d", &v, &x), update_add(1, 0, n - 1, x - 1, v);
    		else if(type == 'R') scanf("%d %d %d", &v, &x, &y), update_replace(1, 0, n - 1, x - 1, y - 1, v);
    		else if(type == 'Q') scanf("%d %d", &x, &y), printf("%d\n", query(1, 0, n - 1, x - 1, y - 1));
    	}
    	return 0;
    } 

